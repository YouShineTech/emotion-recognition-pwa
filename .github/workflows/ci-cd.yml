name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'

jobs:
  # Linting and Code Quality
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Client
        run: |
          cd client
          npm ci

      - name: Install dependencies - Server
        run: |
          cd server
          npm ci

      - name: Lint Client
        run: |
          cd client
          npm run lint

      - name: Lint Server
        run: |
          cd server
          npm run lint

      - name: Type Check Client
        run: |
          cd client
          npm run type-check

      - name: Type Check Server
        run: |
          cd server
          npm run type-check

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Client
        run: |
          cd client
          npm ci

      - name: Install dependencies - Server
        run: |
          cd server
          npm ci

      - name: Run Client Tests
        run: |
          cd client
          npm run test:coverage

      - name: Run Server Tests
        run: |
          cd server
          npm test

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Build
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies - Client
        run: |
          cd client
          npm ci

      - name: Install dependencies - Server
        run: |
          cd server
          npm ci

      - name: Build Client
        run: |
          cd client
          npm run build

      - name: Build Server
        run: |
          cd server
          npm run build

      - name: Upload Client Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/dist/

      - name: Upload Server Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/dist/

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: server/dist/

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Run Integration Tests
        run: |
          cd server
          npm run test:integration
        env:
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment commands here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands here
