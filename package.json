{
  "name": "emotion-recognition-pwa",
  "version": "1.0.0",
  "description": "Real-time emotion recognition PWA with WebRTC and AI processing",
  "main": "index.js",
  "scripts": {
    "setup": "npm run setup:basic",
    "setup:basic": "npm run install:all && npm run build:dev && npm run health:check:basic",
    "setup:full": "npm run install:all && npm run build:dev && npm run health:check",
    "install:all": "npm install && cd client && npm install && cd ../server && npm install",
    "dev": "concurrently \"npm run dev:server\" \"npm run dev:client\" \"npm run dev:monitor\"",
    "dev:server": "cd server && npm run dev",
    "dev:client": "cd client && npm run dev",
    "dev:monitor": "node scripts/module-monitor.js",
    "dev:trace": "DEBUG=emotion-pwa:* npm run dev",
    "dev:docker": "docker-compose up -d && npm run dev:monitor",
    "dev:debug": "concurrently \"npm run dev:server:debug\" \"npm run dev:client\"",
    "dev:server:debug": "cd server && npm run dev:debug",
    "dev:client:debug": "cd client && npm run dev -- --open",
    "dev:interactive": "node scripts/interactive-dev.js",
    "build": "npm run build:dev",
    "build:dev": "npm run build:client:dev && npm run build:server:dev",
    "build:prod": "npm run build:client:prod && npm run build:server:prod",
    "build:watch": "concurrently \"npm run build:client:watch\" \"npm run build:server:watch\"",
    "build:client:dev": "cd client && npm run build",
    "build:client:prod": "cd client && npm run build:prod",
    "build:client:watch": "cd client && npm run build:watch",
    "build:server:dev": "cd server && npm run build",
    "build:server:prod": "cd server && npm run build:prod",
    "build:server:watch": "cd server && npm run build:watch",
    "build:analyze": "npm run build:client:analyze && npm run build:server:analyze",
    "test": "npm run test:lint && npm run test:type && npm run test:imports && npm run test:unit",
    "test:unit": "npm run test:client && npm run test:server",
    "test:client": "cd client && npm test",
    "test:server": "cd server && npm test",
    "test:coverage": "npm run test:client:coverage && npm run test:server:coverage",
    "test:client:coverage": "cd client && npm run test:coverage",
    "test:server:coverage": "cd server && npm run test:coverage",
    "test:watch": "concurrently \"npm run test:client:watch\" \"npm run test:server:watch\"",
    "test:client:watch": "cd client && npm run test:watch",
    "test:server:watch": "cd server && npm run test:watch",
    "test:integration": "cd server && npm run test:integration",
    "test:e2e": "npm run test:e2e:setup && cypress run",
    "test:e2e:open": "npm run test:e2e:setup && cypress open",
    "test:e2e:setup": "npm run build:dev && npm run start:test:env",
    "test:lint": "npm run test:lint:client && npm run test:lint:server",
    "test:lint:client": "cd client && npm run lint",
    "test:lint:server": "cd server && npm run lint",
    "test:type": "npm run test:type:client && npm run test:type:server",
    "test:type:client": "cd client && npm run type-check",
    "test:type:server": "cd server && npm run type-check",
    "test:imports": "node scripts/validate-imports.js",
    "test:imports:fix": "npm run lint:fix && npm run test:imports",
    "test:dependencies": "node scripts/test-dependency-validation.js",
    "test:dependencies:coverage": "node scripts/test-dependency-validation.js --coverage",
    "test:module": "node scripts/test-specific-module.js",
    "test:api": "node scripts/test-api.js",
    "test:api:interactive": "node scripts/test-api-interactive.js",
    "test:webrtc": "node scripts/debug-webrtc.js",
    "test:load:small": "artillery run tests/load/small-load.yml",
    "test:load:medium": "artillery run tests/load/medium-load.yml",
    "test:stress": "artillery run tests/load/stress-test.yml",
    "start": "npm run start:prod",
    "start:dev": "npm run dev",
    "start:prod": "concurrently \"npm run start:server:prod\" \"npm run start:client:prod\"",
    "start:server:prod": "cd server && npm start",
    "start:client:prod": "cd client && npm run serve",
    "start:test:env": "NODE_ENV=test npm run start:dev",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:reset": "docker-compose down -v && docker system prune -f && npm run docker:build",
    "health:check": "node scripts/health-check.js",
    "health:check:basic": "node scripts/health-check.js --basic",
    "status:full": "node scripts/system-status.js",
    "monitor:modules": "node scripts/module-monitor.js",
    "monitor:perf": "node scripts/performance-monitor.js",
    "debug:webrtc": "node scripts/debug-webrtc.js",
    "debug:modules": "DEBUG=emotion-pwa:modules:* node scripts/module-monitor.js",
    "debug:server": "DEBUG=emotion-pwa:server:* cd server && npm run dev",
    "clean": "npm run clean:client && npm run clean:server && npm run clean:root",
    "clean:client": "cd client && npm run clean",
    "clean:server": "cd server && npm run clean",
    "clean:root": "rm -rf node_modules coverage .nyc_output",
    "clean:install": "npm run clean && npm run install:all",
    "clean:modules": "rm -rf node_modules client/node_modules server/node_modules",
    "fresh:install": "npm run clean:modules && npm run setup",
    "lint": "npm run test:lint",
    "lint:fix": "npm run lint:fix:client && npm run lint:fix:server",
    "lint:fix:client": "cd client && npm run lint:fix",
    "lint:fix:server": "cd server && npm run lint:fix",
    "format": "prettier --write \"**/*.{js,ts,json,md}\"",
    "format:check": "prettier --check \"**/*.{js,ts,json,md}\"",
    "hooks:install": "husky install",
    "hooks:test": "npm run test:lint && npm run test:type && npm run test:imports",
    "security:setup": "node scripts/setup-security-tools.js",
    "security:scan": "node scripts/security-scan.js",
    "security:fix": "node scripts/security-fix.js",
    "security:report": "node scripts/security-report.js",
    "ci:local": "npm run ci:lint && npm run ci:test && npm run ci:build && npm run ci:integration",
    "ci:lint": "npm run test:lint && npm run format:check",
    "ci:test": "npm run test:unit && npm run test:coverage && npm run test:imports && npm run test:dependencies",
    "ci:build": "npm run build:prod",
    "ci:integration": "npm run test:integration",
    "ci:deploy:staging": "echo 'Deploying to staging...'",
    "ci:deploy:prod": "echo 'Deploying to production...'",
    "perf:monitor": "node scripts/performance-monitor.js",
    "perf:report": "node scripts/performance-report.js",
    "kill:ports": "lsof -ti:3000,3001,6379 | xargs kill -9 || true",
    "reset": "npm run kill:ports && npm run clean:install && npm run setup",
    "taskmaster:dev": "npx @astrotask/mcp --database-path ./taskmaster.db --log-level debug",
    "taskmaster:start": "npx @astrotask/mcp --database-path ./taskmaster.db",
    "taskmaster:reset": "rm -f taskmaster.db && npm run taskmaster:start",
    "taskmaster:backup": "cp taskmaster.db taskmaster-backup-$(date +%Y%m%d-%H%M%S).db",
    "taskmaster:status": "echo \"Taskmaster AI is configured and ready to use!\""
  },
  "devDependencies": {
    "@astrotask/mcp": "^1.3.0",
    "@typescript-eslint/eslint-plugin": "^8.37.0",
    "@typescript-eslint/parser": "^8.37.0",
    "artillery": "^2.0.23",
    "chalk": "^4.1.2",
    "cli-table3": "^0.6.3",
    "concurrently": "^8.2.2",
    "cypress": "^13.6.0",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.3",
    "glob": "^10.3.10",
    "husky": "^8.0.3",
    "nodemon": "^3.0.1",
    "prettier": "^3.6.2",
    "typedoc": "^0.28.7"
  },
  "husky": {
    "hooks": {
      "pre-commit": "npm run hooks:test",
      "pre-push": "npm run test:unit"
    }
  },
  "keywords": [
    "emotion-recognition",
    "pwa",
    "webrtc",
    "ai",
    "real-time",
    "opencv",
    "mediasoup"
  ],
  "author": "YouShine Tech",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  }
}
